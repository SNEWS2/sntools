# When a tag for a new version is pushed, prepare a new release and build documentation.
# Based on https://github.com/marketplace/actions/create-a-release and
# https://github.com/marketplace/actions/upload-a-release-asset

name: Prepare Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Build Documentation
        uses: xu-cheng/latex-action@v2
        with:
          working_directory: doc
          root_file: documentation.tex
      - name: Get Version Number
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false
      - name: Attach Documentation to Draft Release
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./doc/documentation.pdf
          asset_name: sntools-${{ steps.get_version.outputs.VERSION }}-documentation.pdf
          asset_content_type: application/pdf
